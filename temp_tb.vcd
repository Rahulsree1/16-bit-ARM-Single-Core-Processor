$date
	Tue Nov 26 14:41:15 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module temp_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module uut $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 3 # strmux [2:0] $end
$var wire 5 $ stout [4:0] $end
$var wire 5 % stdatain [4:0] $end
$var wire 16 & r2 [15:0] $end
$var wire 16 ' r1 [15:0] $end
$var wire 1 ( pflag $end
$var wire 5 ) pcmux [4:0] $end
$var wire 5 * pcWire [4:0] $end
$var wire 5 + pcNxt [4:0] $end
$var wire 5 , pII [4:0] $end
$var wire 16 - memout [15:0] $end
$var wire 1 . fcallend $end
$var wire 1 / fcall $end
$var wire 16 0 er2 [15:0] $end
$var wire 1 1 b $end
$var wire 16 2 aluout [15:0] $end
$var wire 2 3 aluop [1:0] $end
$var wire 16 4 alumux [15:0] $end
$var wire 1 5 aluSrc $end
$var wire 3 6 alcontrol [2:0] $end
$var wire 1 7 Rw $end
$var wire 1 8 ResSrc $end
$var wire 16 9 RWdatain [15:0] $end
$var wire 1 : Mw $end
$var wire 16 ; Ist [15:0] $end
$scope module CU $end
$var wire 2 < op [1:0] $end
$var wire 1 = pcSrc $end
$var wire 1 : memW $end
$var wire 1 1 branch $end
$var wire 1 5 aluSrc $end
$var wire 2 > aluOP [1:0] $end
$var wire 1 8 ResSrc $end
$var wire 1 7 Regw $end
$upscope $end
$scope module al $end
$var wire 16 ? AxorB [15:0] $end
$var wire 16 @ aNb [15:0] $end
$var wire 16 A aRb [15:0] $end
$var wire 1 B c $end
$var wire 16 C nB [15:0] $end
$var wire 1 D v $end
$var wire 1 E z $end
$var wire 16 F sum [15:0] $end
$var wire 1 G n $end
$var wire 16 H mux_1 [15:0] $end
$var wire 1 I cout $end
$var wire 16 J aluout [15:0] $end
$var wire 3 K aluControl [2:0] $end
$var wire 16 L B [15:0] $end
$var wire 16 M A [15:0] $end
$scope module utt1 $end
$var wire 16 N I0 [15:0] $end
$var wire 16 O I1 [15:0] $end
$var wire 16 P I2 [15:0] $end
$var wire 16 Q I3 [15:0] $end
$var wire 16 R I4 [15:0] $end
$var wire 16 S I5 [15:0] $end
$var wire 3 T s [2:0] $end
$var wire 16 U out [15:0] $end
$upscope $end
$scope module uut $end
$var wire 16 V B [15:0] $end
$var wire 1 W s $end
$var wire 16 X out [15:0] $end
$var wire 16 Y A [15:0] $end
$upscope $end
$upscope $end
$scope module ald $end
$var wire 2 Z aluop [1:0] $end
$var wire 3 [ func [2:0] $end
$var wire 3 \ aluC [2:0] $end
$upscope $end
$scope module brnch $end
$var wire 3 ] func [2:0] $end
$var wire 1 ( pcflag $end
$var wire 1 ^ lt $end
$var wire 1 _ gt $end
$var wire 1 . fcallend $end
$var wire 1 / fcall $end
$var wire 1 ` eq $end
$var wire 16 a B [15:0] $end
$var wire 16 b A [15:0] $end
$upscope $end
$scope module ext $end
$var wire 5 c in [4:0] $end
$var wire 16 d out [15:0] $end
$upscope $end
$scope module imem $end
$var wire 1 " rst $end
$var wire 5 e adr [4:0] $end
$var wire 16 f Imaout [15:0] $end
$upscope $end
$scope module memory $end
$var wire 1 : WE $end
$var wire 13 g adr [12:0] $end
$var wire 1 ! clk $end
$var wire 16 h WD [15:0] $end
$var wire 16 i Memout [15:0] $end
$upscope $end
$scope module mux21alu $end
$var wire 16 j B [15:0] $end
$var wire 1 5 s $end
$var wire 16 k out [15:0] $end
$var wire 16 l A [15:0] $end
$upscope $end
$scope module pc $end
$var wire 1 ! clk $end
$var wire 5 m pcN [4:0] $end
$var wire 1 " rst $end
$var reg 5 n pc [4:0] $end
$upscope $end
$scope module pcinc $end
$var wire 5 o a [4:0] $end
$var wire 5 p b [4:0] $end
$var wire 1 q s $end
$var wire 5 r c [4:0] $end
$upscope $end
$scope module resmux $end
$var wire 16 s A [15:0] $end
$var wire 16 t B [15:0] $end
$var wire 1 8 s $end
$var wire 16 u out [15:0] $end
$upscope $end
$scope module rm $end
$var wire 3 v A1 [2:0] $end
$var wire 3 w A2 [2:0] $end
$var wire 3 x A3 [2:0] $end
$var wire 16 y WD [15:0] $end
$var wire 1 7 WE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 16 z RD2 [15:0] $end
$var wire 16 { RD1 [15:0] $end
$upscope $end
$scope module st $end
$var wire 1 ! clk $end
$var wire 5 | data_in [4:0] $end
$var wire 1 . pop $end
$var wire 1 / push $end
$var wire 1 " reset $end
$var wire 5 } data_out [4:0] $end
$var reg 5 ~ mem [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx ~
b0 }
bx |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b11001 t
b0 s
bx r
zq
b1 p
bx o
bx n
bx m
b0 l
b0 k
b0 j
b11001 i
b0 h
b0 g
b0 f
bx e
b0 d
b0 c
b0 b
b0 a
1`
0_
0^
b0 ]
b0 \
b0 [
b10 Z
b0 Y
b0 X
0W
b1111111111111111 V
b0 U
b0 T
b0 S
b1111111111111111 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
0I
b0 H
0G
b0 F
1E
0D
b1111111111111111 C
0B
b0 A
b0 @
b0 ?
b10 >
z=
b0 <
b0 ;
0:
b0 9
08
17
b0 6
05
b0 4
b10 3
b0 2
01
b0 0
0/
0.
b11001 -
bx ,
bx +
bx *
b1 )
1(
b0 '
b0 &
bx %
b0 $
b0 #
0"
0!
$end
#5000
b1 +
b1 m
b1 ,
b1 r
b1 %
b1 |
b0 *
b0 e
b0 n
b0 o
1!
#10000
bx -
bx i
bx t
0(
0E
b101 g
bx 9
bx u
bx y
b101 2
b101 J
b101 U
b101 s
0`
1^
b101 F
b101 N
b101 O
b101 ?
b101 S
b101 A
b101 Q
15
b0 3
b0 >
b0 Z
18
b101 '
b101 M
b101 a
b101 {
b111 x
b1 v
b1 <
b111100001 ;
b111100001 f
0!
1"
#15000
b111 g
b111 2
b111 J
b111 U
b111 s
b1 H
b1 X
b1111111111111110 C
b1111111111111110 R
b1111111111111110 V
b111 F
b111 N
b111 O
b111 ?
b111 S
b111 A
b111 Q
b101 &
b101 b
b101 h
b101 l
b101 z
b1 4
b1 L
b1 Y
b1 k
b110 '
b110 M
b110 a
b110 {
b1 #
b1 w
b10 +
b10 m
b1 0
b1 d
b1 j
b1 c
b10 v
b101011100001 ;
b101011100001 f
b10 ,
b10 r
b10 %
b10 |
b1 *
b1 e
b1 n
b1 o
1!
#20000
0!
#25000
xD
xG
xE
bx g
xW
x(
bx $
bx }
bx 2
bx J
bx U
bx s
xB
bx 6
bx K
bx T
bx \
bx H
bx X
bx C
bx R
bx V
x`
x_
x^
bx F
bx N
bx O
xI
bx ?
bx S
bx A
bx Q
bx @
bx P
bx &
bx b
bx h
bx l
bx z
x7
x5
bx 3
bx >
bx Z
x8
bx )
bx p
x/
x.
bx 4
bx L
bx Y
bx k
bx '
bx M
bx a
bx {
bx #
bx w
x:
x1
bx +
bx m
bx ]
bx 0
bx d
bx j
bx c
bx [
bx x
bx v
bx <
bx ;
bx f
bx ,
bx r
b11 %
b11 |
b10 *
b10 e
b10 n
b10 o
1!
#30000
0!
#35000
bx %
bx |
bx *
bx e
bx n
bx o
1!
#40000
0!
#45000
1!
#50000
0!
#55000
1!
#60000
0!
#65000
1!
#70000
0D
b11001 -
b11001 i
b11001 t
b0 9
b0 u
b0 y
0G
1E
b0 g
b0 2
b0 J
b0 U
b0 s
0B
b0 F
b0 N
b0 O
0I
b0 H
b0 X
0W
b0 6
b0 K
b0 T
b0 \
1(
b0 ?
b0 S
b1111111111111111 C
b1111111111111111 R
b1111111111111111 V
b0 A
b0 Q
17
05
b10 3
b10 >
b10 Z
08
b1 )
b1 p
0/
0.
b0 4
b0 L
b0 Y
b0 k
b0 #
b0 w
0:
01
b0 ]
b0 0
b0 d
b0 j
b0 c
b0 [
b0 x
b0 v
b0 <
b0 ;
b0 f
1`
0_
0^
b0 @
b0 P
b0 '
b0 M
b0 a
b0 {
b0 &
b0 b
b0 h
b0 l
b0 z
b0 $
b0 }
0!
0"
#75000
b1 +
b1 m
b1 ,
b1 r
b1 %
b1 |
b0 *
b0 e
b0 n
b0 o
1!
#80000
bx -
bx i
bx t
0(
0E
b101 g
bx 9
bx u
bx y
b101 2
b101 J
b101 U
b101 s
0`
1^
b101 F
b101 N
b101 O
b101 ?
b101 S
b101 A
b101 Q
15
b0 3
b0 >
b0 Z
18
b101 '
b101 M
b101 a
b101 {
b111 x
b1 v
b1 <
b111100001 ;
b111100001 f
0!
1"
#85000
b111 g
b111 2
b111 J
b111 U
b111 s
b1 H
b1 X
b1111111111111110 C
b1111111111111110 R
b1111111111111110 V
b111 F
b111 N
b111 O
b111 ?
b111 S
b111 A
b111 Q
b101 &
b101 b
b101 h
b101 l
b101 z
b1 4
b1 L
b1 Y
b1 k
b110 '
b110 M
b110 a
b110 {
b1 #
b1 w
b10 +
b10 m
b1 0
b1 d
b1 j
b1 c
b10 v
b101011100001 ;
b101011100001 f
b10 ,
b10 r
b10 %
b10 |
b1 *
b1 e
b1 n
b1 o
1!
#90000
0!
#95000
xD
xG
xE
bx g
xW
x(
bx $
bx }
bx 2
bx J
bx U
bx s
xB
bx 6
bx K
bx T
bx \
bx H
bx X
bx C
bx R
bx V
x`
x_
x^
bx F
bx N
bx O
xI
bx ?
bx S
bx A
bx Q
bx @
bx P
bx &
bx b
bx h
bx l
bx z
x7
x5
bx 3
bx >
bx Z
x8
bx )
bx p
x/
x.
bx 4
bx L
bx Y
bx k
bx '
bx M
bx a
bx {
bx #
bx w
x:
x1
bx +
bx m
bx ]
bx 0
bx d
bx j
bx c
bx [
bx x
bx v
bx <
bx ;
bx f
bx ,
bx r
b11 %
b11 |
b10 *
b10 e
b10 n
b10 o
1!
#100000
0!
#105000
bx %
bx |
bx *
bx e
bx n
bx o
1!
#110000
0!
#115000
1!
#120000
0!
#125000
1!
#130000
0!
